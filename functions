#!/usr/bin/env bash

# Simple calculator
function calc() {
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


function extract_archive
{
    compr_file="$1"
    shift

    dest_dir="$1"
    shift

    # uncompress in dest_dir
    compr_ext="${compr_file/*\./}"
    if [ "$compr_ext" = "zip" ]; then
        unzip $compr_file -d $dest_dir
    elif [ "$compr_ext" = "gz" -o "$compr_ext" = "tgz" ]; then
        tar -xzf $compr_file -C $dest_dir
    elif [ "$compr_ext" = "bz2" ]; then
        tar -xjf $compr_file -C $dest_dir
    fi

    # if the archive contained a top-level dir: move its contents in dest_dir
    if [ "$(\ls -1 -d $dest_dir/*/ | wc -l)" = "1"  ]; then
        top_dir="$(\ls -1 -d $dest_dir/*/)"
        # move all including hidden files
        \ls -A $top_dir/ | xargs -n1 -i mv $top_dir/{} $dest_dir/
        rmdir $top_dir
    fi
}


function wgetconfmakeinstall
{
    # url from which to download the archive (use "local" to use already downloaded one)
    url="$1"
    shift 
    # directory where to put the code
    src_dir="$1"
    shift
    # directory where to cd before compiling
    build_from_dir="$1"
    shift
    # directory where to install
    install_dir="$1"
    shift
    # additional options to pass to configure
    conf_opts="$*"

    orig_dir=`pwd`

    # retrieve and extract archive
    if [ "$url" != "local" ]; then
        # erase previous version if any
        rm -rf $src_dir
        mkdir -p $src_dir
        cd $src_dir
        wget $url
        fname="${url/*\//}"
        extract_archive $fname .
    fi

    # compile
    cd $build_from_dir
    #if [ "$url" = "local" ]; then
    #    # a little clean-up is in order
    #    make clean
    #    make distclean
    #fi
    ./configure --prefix=$install_dir $conf_opts
    make -j $N_CORES
    make install

    #rm -f $fname

    cd $orig_dir
}


# print line number
function pl
{

  line_number=$1
  shift

  sed $line_number'q;d' $*

}


function cpu_count
{
  cat /proc/cpuinfo | grep ^processor | wc -l
}


function find_grep
{
  pat="$1"
  shift

  ext="$1"
  shift

  find . -name "*$ext" -exec grep -i -s -I -H "$pat" '{}' \; | sed -e "/pytags/d" -e "/old/d" -e "/deprecated/d" -e "/ipython_log/d"
}


# use python as a calculator
function pcalc
{
  python -c "print $*"
}


# remove duplicates while preserving input order
function dedup {
   awk '! x[$0]++' $@
}

# removes $HISTIGNORE commands from input
function remove_histignore {
   if [ -n "$HISTIGNORE" ]; then
      # replace : with |, then * with .*
      local IGNORE_PAT=`echo "$HISTIGNORE" | sed s/\:/\|/g | sed s/\*/\.\*/g`
      # negated grep removes matches
      grep -vx "$IGNORE_PAT" $@
   else
      cat $@
   fi
}

# clean up the history file by remove duplicates and commands matching
# $HISTIGNORE entries
function history_cleanup {
   local HISTFILE_SRC=~/.bash_history
   local HISTFILE_DST=/tmp/.$USER.bash_history.clean
   if [ -f $HISTFILE_SRC ]; then
      \cp $HISTFILE_SRC $HISTFILE_SRC.backup
      dedup $HISTFILE_SRC | remove_histignore >| $HISTFILE_DST
      \mv $HISTFILE_DST $HISTFILE_SRC
      chmod go-r $HISTFILE_SRC
      history -c
      history -r
   fi
}


# submit any job (not just a bash script) with qsub
# format: myqsub 
function myqsub
{
    full_cmd="$*"
    qsub_opts="$(echo $full_cmd | sed 's/ -- .*//')"
    cmd="$(echo $full_cmd | sed 's/^.* -- //')"
    if [ ! "$cmd" ]; then
        echo "nothing to submit"
    else
        sf="tmp_job_$RANDOM.sh"
        echo '#!/usr/bin/env bash' > $sf
        echo "$cmd" >> $sf
        chmod u+x $sf
        qsub $qsub_opts $sf
    fi
}


function myqinfos
{
    echo "my jobs: $(qstat | grep ' r ' | wc -l)/$(qstat | grep $(whoami) | wc -l)"
    echo
    qstat | grep " q." | sed "s,^.*q\..*@\(.*\).grenoble.*$,\1," | sort | uniq -c | sort -nr
    echo
    qstat -g c
}


# # local color vars
# c_reset='\e[0m'
# c_red='\e[0;31m'
# c_green='\e[0;32m'
# c_brown='\e[0;33m'
# 
# 
# # bash function to extract git branch name
# function parse_git_branch ()
# {
#   if git rev-parse --git-dir >/dev/null 2>&1; then
#     gitver=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
#     # add short hash of current commit
#     gitver=$gitver-$(git rev-parse --short HEAD)
#     # add colors depending on status
#     if git diff --quiet 2>/dev/null >&2; then
#       gitver="($c_green$gitver$c_reset)"
#     else
#       gitver="($c_red$gitver$c_reset)"
#     fi
#   else
#     return 0
#   fi &> /dev/null
#   echo -e $gitver
# }
